{"_path":"/interviews/react/doc/hooks","_dir":"doc","_draft":false,"_partial":false,"_locale":"","title":"React hooks","description":"React hooks are functions that let you use React State, Lifecycle features, and other React capabilities in functional components.","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"react-hooks"},"children":[{"type":"text","value":"React Hooks"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"React hooks are functions that let you use "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"React State"}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Lifecycle features"}]},{"type":"text","value":", and other React capabilities in functional components."}]},{"type":"element","tag":"h3","props":{"id":"common-hooks"},"children":[{"type":"text","value":"Common Hooks"}]},{"type":"element","tag":"h4","props":{"id":"usestate"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useState"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Manage state in function component"}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"const [state, setState] = useState(<INITIAL VALUE>);\n\nsetState(<UPDATED VALUE>);\n\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const [state, setState] = useState(<INITIAL VALUE>);\n\nsetState(<UPDATED VALUE>);\n\n"}]}]},{"type":"element","tag":"h4","props":{"id":"useeffect"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useEffect"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Handles side effects like data fetching, subscriptions, and manual DOM manipulations."}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"useEffect(() => {\n    // mount \n    return () => {\n        // unmount\n    }\n}, [DEPENDANCY ARRAY])\n\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"useEffect(() => {\n    // mount \n    return () => {\n        // unmount\n    }\n}, [DEPENDANCY ARRAY])\n\n"}]}]},{"type":"element","tag":"h4","props":{"id":"usecontext"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useContext"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Accesses context values without the need for a Consumer component."}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"    const value = useContext(MyContext)\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    const value = useContext(MyContext)\n"}]}]},{"type":"element","tag":"h3","props":{"id":"performance-hooks"},"children":[{"type":"text","value":"Performance Hooks"}]},{"type":"element","tag":"h4","props":{"id":"usememo"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useMemo"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Memoizes a value to optimize performance for expensive calculations."}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"    const [ number, setNumber] = useState(0);\n    setNumber(3)\n    const doubleNumber = useMemo(() => {\n        return number * 2;\n    }, [ number])\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    const [ number, setNumber] = useState(0);\n    setNumber(3)\n    const doubleNumber = useMemo(() => {\n        return number * 2;\n    }, [ number])\n"}]}]},{"type":"element","tag":"h4","props":{"id":"usecallback"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useCallback"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Memoizes a function to prevent unnecessary re-creations."}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"    const memoizedFunction = useCallback(() => {\n    \n    }, [ dependency ])\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    const memoizedFunction = useCallback(() => {\n    \n    }, [ dependency ])\n"}]}]},{"type":"element","tag":"h4","props":{"id":"usetransition"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useTransition"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Helps manage transitions between UI states."}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"    const [ isPending, startTransition ] = useTransition();\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    const [ isPending, startTransition ] = useTransition();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Example"}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"\nconst TransitionExample = () => {\n\n    const initalItems = [...Array(1000000).keys()];\n\n    const [ isPending, startTransition ] = useTransition();\n    \n    const [ items, setItems ] = useState(initialItems)\n\n    const handleSearchKeyWord = (event) => {\n        let value = event?.target?.value || 2;\n        startTransition(() => {\n            setItem((prevItems) => {\n                return initalItems.filter((_, index) => {\n                    return _%2value;\n                })\n            \n            })\n        })\n        \n    }\n\n    return (\n        <div className='transition-element'>\n            <div className=''>\n                <input type='text' onChange={ handleSearchKeyWord }/>\n            </div>\n            { isPending && <div>Loading...</div>}\n            { !isPending && <div>\n                {\n                    items.map((item, index) => {\n                        <div key={`${item}-${index}}></div>\n                    })                                        \n                }\n            </div>}\n        </div>\n    )\n}\n\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nconst TransitionExample = () => {\n\n    const initalItems = [...Array(1000000).keys()];\n\n    const [ isPending, startTransition ] = useTransition();\n    \n    const [ items, setItems ] = useState(initialItems)\n\n    const handleSearchKeyWord = (event) => {\n        let value = event?.target?.value || 2;\n        startTransition(() => {\n            setItem((prevItems) => {\n                return initalItems.filter((_, index) => {\n                    return _%2value;\n                })\n            \n            })\n        })\n        \n    }\n\n    return (\n        <div className='transition-element'>\n            <div className=''>\n                <input type='text' onChange={ handleSearchKeyWord }/>\n            </div>\n            { isPending && <div>Loading...</div>}\n            { !isPending && <div>\n                {\n                    items.map((item, index) => {\n                        <div key={`${item}-${index}}></div>\n                    })                                        \n                }\n            </div>}\n        </div>\n    )\n}\n\n"}]}]},{"type":"element","tag":"h4","props":{"id":"usedeferredvalue"},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useDeferredValue"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Defers updates for better responsiveness in UI-heavy apps."}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"const ImageGallery = () => {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const deferredSelectedImage = useDeferredValue(selectedImage, { timeoutMs: 500 }); \n\n  const handleImageClick = (image) => {\n    setSelectedImage(image);\n  };\n\n  return (\n    <div>\n      {/* Image Thumbnails */}\n      <div>\n        {images.map((image) => (\n          <img \n            key={image.id} \n            src={image.thumbnail} \n            alt={image.title} \n            onClick={() => handleImageClick(image)} \n          />\n        ))}\n      </div>\n\n      {/* Large Image Viewer */}\n      {deferredSelectedImage && (\n        <div>\n          <img \n            src={deferredSelectedImage.url} \n            alt={deferredSelectedImage.title} \n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const ImageGallery = () => {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const deferredSelectedImage = useDeferredValue(selectedImage, { timeoutMs: 500 }); \n\n  const handleImageClick = (image) => {\n    setSelectedImage(image);\n  };\n\n  return (\n    <div>\n      {/* Image Thumbnails */}\n      <div>\n        {images.map((image) => (\n          <img \n            key={image.id} \n            src={image.thumbnail} \n            alt={image.title} \n            onClick={() => handleImageClick(image)} \n          />\n        ))}\n      </div>\n\n      {/* Large Image Viewer */}\n      {deferredSelectedImage && (\n        <div>\n          <img \n            src={deferredSelectedImage.url} \n            alt={deferredSelectedImage.title} \n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"common-hooks","depth":3,"text":"Common Hooks"},{"id":"performance-hooks","depth":3,"text":"Performance Hooks"}]}},"_type":"markdown","_id":"content:interviews:react:doc:hooks.md","_source":"content","_file":"interviews/react/doc/hooks.md","_stem":"interviews/react/doc/hooks","_extension":"md"}