{"_path":"/interviews/react/doc/optimization","_dir":"doc","_draft":false,"_partial":false,"_locale":"","title":"React Optimization","description":"","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"react-performance-improvements"},"children":[{"type":"text","value":"React Performance Improvements"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h3","props":{"id":"reactmemo-usememo-usecallback"},"children":[{"type":"text","value":"React.memo, useMemo, useCallback"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h4","props":{"id":"reactmemo"},"children":[{"type":"text","value":"React.memo"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Optimizes functional components by memoizing their output to prevent unnecessary re-renders. If the props of the components don't change, React skips re-rendering it.\nFunctional components that rely only on props and avoid re-rendering if props remain the same"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Prevents re-renders of functional components"}]}]},{"type":"element","tag":"h4","props":{"id":"usememo"},"children":[{"type":"text","value":"useMemo"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Memoizes a computed value to avoid recalculating it on every renders unless dependencies changes. Caches the result of an expensive calculation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Prevents expensive calculations from being re-executed"}]}]},{"type":"element","tag":"h4","props":{"id":"usecallback"},"children":[{"type":"text","value":"useCallback"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Memoizes a function so that it retains the same references between renderts unless its dependencies changes. Prevent unnecessary recreation of functions, often useful when passing callbacks to child components"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Prevent functions from being recreated unnessarily"}]}]},{"type":"element","tag":"h4","props":{"id":"react-lazy"},"children":[{"type":"text","value":"React Lazy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Enable code splitting in react applications by dynamically importing components. This helps in optimizing app performance by loading components only when they are needed."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Code Splitting: Divides the application into smaller bundles to improve initial load time"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Dynamic Imports: The compoinent is not loaded until it is rendered"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Suspense Integration: Work with the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"React.Suspense"}]},{"type":"text","value":" components to show a falback UI while the lazy loaded components is being fetched."}]}]},{"type":"element","tag":"pre","props":{"className":["language-react"],"code":"\nimport React, { Suspense } from 'react';\n\nconst LazyComponent = React.lazy(() => import('./MyComponent'));\n\nconst App = () => {\n    return (\n        <div className='app'>\n            <Suspense fallback={<div>Loading</div>}>\n                <LazyComponent/>\n            </Suspense>\n        </div>\n    )\n}\n\n","language":"react","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\nimport React, { Suspense } from 'react';\n\nconst LazyComponent = React.lazy(() => import('./MyComponent'));\n\nconst App = () => {\n    return (\n        <div className='app'>\n            <Suspense fallback={<div>Loading</div>}>\n                <LazyComponent/>\n            </Suspense>\n        </div>\n    )\n}\n\n"}]}]},{"type":"element","tag":"h4","props":{"id":"react-performance-packages"},"children":[{"type":"text","value":"React performance packages"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"react-intersection-observer"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"react-lazyload"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"react-virtualized"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"react-window"}]}]},{"type":"element","tag":"h4","props":{"id":"performce-improvements"},"children":[{"type":"text","value":"Performce Improvements"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Avoid inline function definition"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Throttling and debouncing events"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Add key to list rendering"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"React SSR"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use Web workers"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"react-performance-improvements","depth":2,"text":"React Performance Improvements","children":[{"id":"reactmemo-usememo-usecallback","depth":3,"text":"React.memo, useMemo, useCallback"}]}]}},"_type":"markdown","_id":"content:interviews:react:doc:optimization.md","_source":"content","_file":"interviews/react/doc/optimization.md","_stem":"interviews/react/doc/optimization","_extension":"md"}