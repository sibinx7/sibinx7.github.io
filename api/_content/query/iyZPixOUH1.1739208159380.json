{"_path":"/interviews/javascript/doc/questions","_dir":"doc","_draft":false,"_partial":false,"_locale":"","title":"Interview logical questions","description":"","body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"predict-output"},"children":[{"type":"text","value":"Predict output"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Question"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"    function example() {\n        var x = 1;\n        let y = 2;\n        const z = 3;\n    \n        if (true) {\n            var x = 10; \n            let y = 20; \n            const z = 30;\n            console.log(x, y, z); \n        }\n    \n        console.log(x, y, z); \n    }\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"    function example() {\n        var x = 1;\n        let y = 2;\n        const z = 3;\n    \n        if (true) {\n            var x = 10; \n            let y = 20; \n            const z = 30;\n            console.log(x, y, z); \n        }\n    \n        console.log(x, y, z); \n    }\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Answer:"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"\n10,20,30\n10,2,3\n\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"\n10,20,30\n10,2,3\n\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{"start":2},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Question"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('Rejected');\n  }, 200)\n  setTimeout(() => {\n    resolve('Resolved');\n    // console.log('Hello')\n  }, 300);\n});\n\nmyPromise\n.then(e => console.log('Success', e))\n.catch(e => console.log('Failed', e))\n.finally(e => console.log('Final', e))\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    reject('Rejected');\n  }, 200)\n  setTimeout(() => {\n    resolve('Resolved');\n    // console.log('Hello')\n  }, 300);\n});\n\nmyPromise\n.then(e => console.log('Success', e))\n.catch(e => console.log('Failed', e))\n.finally(e => console.log('Final', e))\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Answer"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"Failed, Rejected\nFinal, undefined\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Failed, Rejected\nFinal, undefined\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Question"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const promiseX = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"Promise X resolved\"), 1000);\n});\nconst promiseY = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"Promise Y resolved\"), 500);\n});\nPromise.race([promiseX, promiseY])\n    .then(result => {\n        console.log(result); \n    })\n    .catch(error => console.error('Error:', error));\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const promiseX = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"Promise X resolved\"), 1000);\n});\nconst promiseY = new Promise((resolve, reject) => {\n    setTimeout(() => resolve(\"Promise Y resolved\"), 500);\n});\nPromise.race([promiseX, promiseY])\n    .then(result => {\n        console.log(result); \n    })\n    .catch(error => console.error('Error:', error));\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Answer"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"Promise Y resolved\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Promise Y resolved\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{"start":4},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Question"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":" async function fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Data fetched\");\n    }, 1000);\n  });\n}\n\nasync function processData() {\n  console.log(\"Start processing\");\n  const data = await fetchData();\n  console.log(data);\n  console.log(\"Processing complete\");\n}\n\nconsole.log(\"Begin\");\n\nprocessData().then(() => {\n  console.log(\"Done\");\n});\n\nconsole.log(\"End\");\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":" async function fetchData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(\"Data fetched\");\n    }, 1000);\n  });\n}\n\nasync function processData() {\n  console.log(\"Start processing\");\n  const data = await fetchData();\n  console.log(data);\n  console.log(\"Processing complete\");\n}\n\nconsole.log(\"Begin\");\n\nprocessData().then(() => {\n  console.log(\"Done\");\n});\n\nconsole.log(\"End\");\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Answer"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"Begin\nStart processing\nEnd\nData fetched\nProcessing complete\nDone\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Begin\nStart processing\nEnd\nData fetched\nProcessing complete\nDone\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{"start":5},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Question"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const { x: a = 10, y: b = 20 } = { x: undefined, y: null };\nconsole.log(a, b);\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const { x: a = 10, y: b = 20 } = { x: undefined, y: null };\nconsole.log(a, b);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Answer"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"10 null\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"10 null\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{"start":6},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Question"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"async function test() {\n  console.log('Start');\n  const p1 = new Promise((resolve) => setTimeout(() => resolve('P1'), 1000));\n  const p2 = new Promise((resolve) => setTimeout(() => resolve('P2'), 500));\n  console.log(await p1);\n  console.log(await p2);\n  console.log('End');\n}\ntest();\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"async function test() {\n  console.log('Start');\n  const p1 = new Promise((resolve) => setTimeout(() => resolve('P1'), 1000));\n  const p2 = new Promise((resolve) => setTimeout(() => resolve('P2'), 500));\n  console.log(await p1);\n  console.log(await p2);\n  console.log('End');\n}\ntest();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Answer"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"Start \nP1\nP2 \nEnd\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Start \nP1\nP2 \nEnd\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{"start":7},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Question"}]}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"console.log('Hello ' + 5);       \nconsole.log(5 + '5');             \nconsole.log(null + 'text');       \nconsole.log(1 == '1');           \nconsole.log(null == undefined);\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"console.log('Hello ' + 5);       \nconsole.log(5 + '5');             \nconsole.log(null + 'text');       \nconsole.log(1 == '1');           \nconsole.log(null == undefined);\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Answer"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"Hello 5\n55\nnulltext\ntrue\ntrue\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Hello 5\n55\nnulltext\ntrue\ntrue\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"var retry= 0;\nlet isExist = false;\nfunction containsValue(obj, targetValue) {\n    // your logic goes here\n  retry++;  \n  if(isExist){\n    return \n  }\n \n  if(typeof obj !== \"object\"){      \n        if(obj === targetValue){        \n      isExist = true;\n        return true      \n    } ;\n  }else{\n    const values = Object.values(obj); \n    values.forEach((item, index) => {     \n        return containsValue(item, targetValue);\n    })\n  }\n \n \n return isExist;\n \n\n}\n \nconst myObject = {\n  a: 1,\n  b: {\n    c: 2,\n    d: {\n      e: \"hello\",\n      f: 4\n    }\n  },\n  g: \"world\"\n};\n \n//console.log(containsValue(myObject, \"hello\")); // Output: true\n//console.log(containsValue(myObject, 5));     // Output: false\nconsole.log(containsValue(myObject, 2));   // Output: true\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var retry= 0;\nlet isExist = false;\nfunction containsValue(obj, targetValue) {\n    // your logic goes here\n  retry++;  \n  if(isExist){\n    return \n  }\n \n  if(typeof obj !== \"object\"){      \n        if(obj === targetValue){        \n      isExist = true;\n        return true      \n    } ;\n  }else{\n    const values = Object.values(obj); \n    values.forEach((item, index) => {     \n        return containsValue(item, targetValue);\n    })\n  }\n \n \n return isExist;\n \n\n}\n \nconst myObject = {\n  a: 1,\n  b: {\n    c: 2,\n    d: {\n      e: \"hello\",\n      f: 4\n    }\n  },\n  g: \"world\"\n};\n \n//console.log(containsValue(myObject, \"hello\")); // Output: true\n//console.log(containsValue(myObject, 5));     // Output: false\nconsole.log(containsValue(myObject, 2));   // Output: true\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"predict-output","depth":3,"text":"Predict output"}]}},"_type":"markdown","_id":"content:interviews:javascript:doc:questions.md","_source":"content","_file":"interviews/javascript/doc/questions.md","_stem":"interviews/javascript/doc/questions","_extension":"md"}