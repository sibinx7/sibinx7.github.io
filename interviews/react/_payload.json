[{"data":1,"prerenderedAt":2214},["ShallowReactive",2],{"markdown":3},[4,21,735,745,1244,1753,2008,2017],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":8,"title":8,"description":8,"body":9,"_type":15,"_id":16,"_source":17,"_file":18,"_stem":19,"_extension":20},"/interviews/angular","interviews",false,"",{"type":10,"children":11,"toc":12},"root",[],{"title":8,"searchDepth":13,"depth":13,"links":14},2,[],"markdown","content:interviews:angular:index.md","content","interviews/angular/index.md","interviews/angular/index","md",{"_path":22,"_dir":23,"_draft":7,"_partial":7,"_locale":8,"title":24,"description":8,"body":25,"_type":15,"_id":732,"_source":17,"_file":733,"_stem":734,"_extension":20},"/interviews/javascript/doc/basic","doc","Javascript Software Design",{"type":10,"children":26,"toc":727},[27,36,42,49,54,60,65,71,76,82,87,93,98,104,109,115,120,126,131,137,142,148,153,163,169,174,180,185,191,196,202,207,213,218,224,229,235,240,246,251,257,262,268,273,279,284,290,295,301,306,312,317,323,328,334,339,345,350,356,361,367,372,378,383,387,393,398],{"type":28,"tag":29,"props":30,"children":32},"element","h3",{"id":31},"design-pattern",[33],{"type":34,"value":35},"text","Design Pattern",{"type":28,"tag":37,"props":38,"children":39},"p",{},[40],{"type":34,"value":41},"Software design pattern",{"type":28,"tag":43,"props":44,"children":46},"h5",{"id":45},"_1-singleton-pattern",[47],{"type":34,"value":48},"1.    Singleton Pattern",{"type":28,"tag":37,"props":50,"children":51},{},[52],{"type":34,"value":53},"Ensures that a class has only one instance and provides a global point of access to it. Often used for shared resources such as configuration settings or database connections.",{"type":28,"tag":43,"props":55,"children":57},{"id":56},"_2-factory-pattern",[58],{"type":34,"value":59},"2.    Factory Pattern",{"type":28,"tag":37,"props":61,"children":62},{},[63],{"type":34,"value":64},"Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created. Useful for creating instances dynamically based on specific requirements.",{"type":28,"tag":43,"props":66,"children":68},{"id":67},"_3-observer-pattern",[69],{"type":34,"value":70},"3.    Observer Pattern",{"type":28,"tag":37,"props":72,"children":73},{},[74],{"type":34,"value":75},"Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically. Commonly used in event-driven architectures.",{"type":28,"tag":43,"props":77,"children":79},{"id":78},"_4-decorator-pattern",[80],{"type":34,"value":81},"4.    Decorator Pattern",{"type":28,"tag":37,"props":83,"children":84},{},[85],{"type":34,"value":86},"Allows behavior to be added to individual objects, either statically or dynamically, without affecting the behavior of other objects from the same class. Useful for extending functionality without modifying the base class.",{"type":28,"tag":43,"props":88,"children":90},{"id":89},"_5-strategy-pattern",[91],{"type":34,"value":92},"5.    Strategy Pattern",{"type":28,"tag":37,"props":94,"children":95},{},[96],{"type":34,"value":97},"Enables selecting an algorithm's behavior at runtime. Defines a family of algorithms, encapsulates each one, and makes them interchangeable.",{"type":28,"tag":43,"props":99,"children":101},{"id":100},"_6-middleware-pattern",[102],{"type":34,"value":103},"6.    Middleware Pattern",{"type":28,"tag":37,"props":105,"children":106},{},[107],{"type":34,"value":108},"Processes requests and responses in a chain-like manner. Often used in web frameworks like Express.js to apply a sequence of reusable processing logic.",{"type":28,"tag":43,"props":110,"children":112},{"id":111},"_7-module-pattern",[113],{"type":34,"value":114},"7.    Module Pattern",{"type":28,"tag":37,"props":116,"children":117},{},[118],{"type":34,"value":119},"Encapsulates code and organizes it into reusable, self-contained components. It hides internal implementation details while exposing specific public methods.",{"type":28,"tag":43,"props":121,"children":123},{"id":122},"_8-proxy-pattern",[124],{"type":34,"value":125},"8.    Proxy Pattern",{"type":28,"tag":37,"props":127,"children":128},{},[129],{"type":34,"value":130},"Provides a surrogate or placeholder object to control access to another object. Useful for lazy initialization, access control, and logging.",{"type":28,"tag":43,"props":132,"children":134},{"id":133},"_9-command-pattern",[135],{"type":34,"value":136},"9.    Command Pattern",{"type":28,"tag":37,"props":138,"children":139},{},[140],{"type":34,"value":141},"Encapsulates a request as an object, allowing you to parameterize objects with different requests, delay execution, or queue requests. Often used in task scheduling and undo operations.",{"type":28,"tag":43,"props":143,"children":145},{"id":144},"_10-mvc-pattern-model-view-controller",[146],{"type":34,"value":147},"10.   MVC Pattern (Model-View-Controller)",{"type":28,"tag":37,"props":149,"children":150},{},[151],{"type":34,"value":152},"Separates application logic into three interconnected components:",{"type":28,"tag":154,"props":155,"children":157},"pre",{"code":156},"- Model: Handles data and business logic.\n- View: Manages the presentation layer.\n- Controller: Handles user input and updates the model or view accordingly.\n",[158],{"type":28,"tag":159,"props":160,"children":161},"code",{"__ignoreMap":8},[162],{"type":34,"value":156},{"type":28,"tag":43,"props":164,"children":166},{"id":165},"_11-repository-pattern",[167],{"type":34,"value":168},"11.   Repository Pattern",{"type":28,"tag":37,"props":170,"children":171},{},[172],{"type":34,"value":173},"Abstracts data access logic, providing a clean API to interact with the database or other storage layers. Useful for separating the business logic from data access concerns.",{"type":28,"tag":43,"props":175,"children":177},{"id":176},"_12-builder-pattern",[178],{"type":34,"value":179},"12.   Builder Pattern",{"type":28,"tag":37,"props":181,"children":182},{},[183],{"type":34,"value":184},"Provides a way to construct complex objects step by step. It separates the construction process from the representation, allowing the same construction process to create different representations.",{"type":28,"tag":43,"props":186,"children":188},{"id":187},"_13-adapter-pattern",[189],{"type":34,"value":190},"13.   Adapter Pattern",{"type":28,"tag":37,"props":192,"children":193},{},[194],{"type":34,"value":195},"Allows incompatible interfaces to work together. It acts as a bridge between two objects, making them compatible without altering their existing code.",{"type":28,"tag":43,"props":197,"children":199},{"id":198},"_14-composite-pattern",[200],{"type":34,"value":201},"14.   Composite Pattern",{"type":28,"tag":37,"props":203,"children":204},{},[205],{"type":34,"value":206},"Composes objects into tree structures to represent part-whole hierarchies. Treats individual objects and compositions of objects uniformly, making them easier to work with.",{"type":28,"tag":43,"props":208,"children":210},{"id":209},"_15-template-pattern",[211],{"type":34,"value":212},"15.   Template Pattern",{"type":28,"tag":37,"props":214,"children":215},{},[216],{"type":34,"value":217},"Defines the skeleton of an algorithm in a superclass, allowing subclasses to override specific steps without changing its overall structure.",{"type":28,"tag":43,"props":219,"children":221},{"id":220},"_16-prototype-pattern",[222],{"type":34,"value":223},"16.   Prototype Pattern",{"type":28,"tag":37,"props":225,"children":226},{},[227],{"type":34,"value":228},"Creates new objects by copying an existing object, known as the prototype. Useful when object creation is expensive, and new objects share many properties with existing ones.",{"type":28,"tag":43,"props":230,"children":232},{"id":231},"_17-chain-of-responsibility-pattern",[233],{"type":34,"value":234},"17.   Chain of Responsibility Pattern",{"type":28,"tag":37,"props":236,"children":237},{},[238],{"type":34,"value":239},"Allows a request to be passed along a chain of handlers until it is processed. Each handler decides either to process the request or pass it to the next handler.",{"type":28,"tag":43,"props":241,"children":243},{"id":242},"_18-flyweight-pattern",[244],{"type":34,"value":245},"18.   Flyweight Pattern",{"type":28,"tag":37,"props":247,"children":248},{},[249],{"type":34,"value":250},"Minimizes memory usage by sharing as much data as possible between similar objects. Particularly useful for large numbers of similar objects.",{"type":28,"tag":43,"props":252,"children":254},{"id":253},"_19-state-pattern",[255],{"type":34,"value":256},"19.   State Pattern",{"type":28,"tag":37,"props":258,"children":259},{},[260],{"type":34,"value":261},"Allows an object to alter its behavior when its internal state changes. It appears as if the object changed its class dynamically.",{"type":28,"tag":43,"props":263,"children":265},{"id":264},"_20-observer-mediator-pattern",[266],{"type":34,"value":267},"20.   Observer-Mediator Pattern",{"type":28,"tag":37,"props":269,"children":270},{},[271],{"type":34,"value":272},"Centralizes communication between objects in a system. Instead of objects communicating directly, a mediator handles interactions to reduce dependencies.",{"type":28,"tag":43,"props":274,"children":276},{"id":275},"_21-bridge-pattern",[277],{"type":34,"value":278},"21.   Bridge Pattern",{"type":28,"tag":37,"props":280,"children":281},{},[282],{"type":34,"value":283},"Decouples an abstraction from its implementation so that the two can vary independently. It is especially useful for systems that might need to switch between different implementations at runtime.",{"type":28,"tag":43,"props":285,"children":287},{"id":286},"_22-visitor-pattern",[288],{"type":34,"value":289},"22.   Visitor Pattern",{"type":28,"tag":37,"props":291,"children":292},{},[293],{"type":34,"value":294},"Separates algorithms from the objects on which they operate. Useful for adding new operations to existing object structures without modifying their code.",{"type":28,"tag":43,"props":296,"children":298},{"id":297},"_23-iterator-pattern",[299],{"type":34,"value":300},"23.   Iterator Pattern",{"type":28,"tag":37,"props":302,"children":303},{},[304],{"type":34,"value":305},"Provides a way to access elements of a collection sequentially without exposing its underlying representation. Useful for traversing data structures.",{"type":28,"tag":43,"props":307,"children":309},{"id":308},"_24-dependency-injection-pattern",[310],{"type":34,"value":311},"24.   Dependency Injection Pattern",{"type":28,"tag":37,"props":313,"children":314},{},[315],{"type":34,"value":316},"Allows a class to receive its dependencies from an external source rather than creating them internally. Promotes loose coupling and testability.",{"type":28,"tag":43,"props":318,"children":320},{"id":319},"_25-service-locator-pattern",[321],{"type":34,"value":322},"25.   Service Locator Pattern",{"type":28,"tag":37,"props":324,"children":325},{},[326],{"type":34,"value":327},"Centralizes the logic for locating services. It acts as a registry for services that can be accessed globally, reducing the complexity of dependency management.",{"type":28,"tag":43,"props":329,"children":331},{"id":330},"_26-publish-subscribe-pattern",[332],{"type":34,"value":333},"26.   Publish-Subscribe Pattern",{"type":28,"tag":37,"props":335,"children":336},{},[337],{"type":34,"value":338},"Facilitates communication between multiple components in a loosely coupled way. Publishers send messages, and subscribers listen for them, often through an event bus or message queue.",{"type":28,"tag":43,"props":340,"children":342},{"id":341},"_27-data-mapper-pattern",[343],{"type":34,"value":344},"27.   Data Mapper Pattern",{"type":28,"tag":37,"props":346,"children":347},{},[348],{"type":34,"value":349},"Separates the database schema from the application logic by mapping database records to application objects. Simplifies data transformations.",{"type":28,"tag":43,"props":351,"children":353},{"id":352},"_28-active-record-pattern",[354],{"type":34,"value":355},"28.   Active Record Pattern",{"type":28,"tag":37,"props":357,"children":358},{},[359],{"type":34,"value":360},"Encapsulates database operations within an object. The object directly corresponds to a database table and handles CRUD operations.",{"type":28,"tag":43,"props":362,"children":364},{"id":363},"_29-lazy-initialization-pattern",[365],{"type":34,"value":366},"29.   Lazy Initialization Pattern",{"type":28,"tag":37,"props":368,"children":369},{},[370],{"type":34,"value":371},"Delays the creation or calculation of a resource until it is actually needed. Useful for optimizing resource usage.",{"type":28,"tag":43,"props":373,"children":375},{"id":374},"_30-object-pool-pattern",[376],{"type":34,"value":377},"30.   Object Pool Pattern",{"type":28,"tag":37,"props":379,"children":380},{},[381],{"type":34,"value":382},"Maintains a pool of objects ready for use rather than creating and destroying them repeatedly. Useful for managing expensive resource allocation.",{"type":28,"tag":384,"props":385,"children":386},"hr",{},[],{"type":28,"tag":29,"props":388,"children":390},{"id":389},"memory-management-in-javascript",[391],{"type":34,"value":392},"Memory management in Javascript",{"type":28,"tag":37,"props":394,"children":395},{},[396],{"type":34,"value":397},"Memory management is the process of allocating and deallocating memory in your program to ensure efficient use of resources. JavaScript handles memory automatically using garbage collection. Here’s a detailed explanation:",{"type":28,"tag":399,"props":400,"children":401},"ul",{},[402,446,500,537,600],{"type":28,"tag":403,"props":404,"children":405},"li",{},[406,412],{"type":28,"tag":43,"props":407,"children":409},{"id":408},"memory-lifecycle",[410],{"type":34,"value":411},"Memory Lifecycle",{"type":28,"tag":399,"props":413,"children":414},{},[415,426,436],{"type":28,"tag":403,"props":416,"children":417},{},[418,424],{"type":28,"tag":419,"props":420,"children":421},"em",{},[422],{"type":34,"value":423},"Allocate Memory",{"type":34,"value":425}," - When you create variables, objects or functions, memory is allocated to store data.",{"type":28,"tag":403,"props":427,"children":428},{},[429,434],{"type":28,"tag":419,"props":430,"children":431},{},[432],{"type":34,"value":433},"Use Memory",{"type":34,"value":435}," - The program accesses and manipulated the allocated memory during execution.",{"type":28,"tag":403,"props":437,"children":438},{},[439,444],{"type":28,"tag":419,"props":440,"children":441},{},[442],{"type":34,"value":443},"Release Memory",{"type":34,"value":445}," - When the memory is no longer needed, it should be deallocated to avoid memory leaks.",{"type":28,"tag":403,"props":447,"children":448},{},[449,455],{"type":28,"tag":43,"props":450,"children":452},{"id":451},"typeof-memory",[453],{"type":34,"value":454},"Typeof Memory",{"type":28,"tag":399,"props":456,"children":457},{},[458,479],{"type":28,"tag":403,"props":459,"children":460},{},[461,466],{"type":28,"tag":419,"props":462,"children":463},{},[464],{"type":34,"value":465},"Heap",{"type":28,"tag":399,"props":467,"children":468},{},[469,474],{"type":28,"tag":403,"props":470,"children":471},{},[472],{"type":34,"value":473},"Use for storing object and functions",{"type":28,"tag":403,"props":475,"children":476},{},[477],{"type":34,"value":478},"Dynamically allocated memory",{"type":28,"tag":403,"props":480,"children":481},{},[482,487],{"type":28,"tag":419,"props":483,"children":484},{},[485],{"type":34,"value":486},"Stack",{"type":28,"tag":399,"props":488,"children":489},{},[490,495],{"type":28,"tag":403,"props":491,"children":492},{},[493],{"type":34,"value":494},"Used for storing primitive values and execution contexts (function only)",{"type":28,"tag":403,"props":496,"children":497},{},[498],{"type":34,"value":499},"Operates in a Last-In-First-Out (LIFO) manner",{"type":28,"tag":403,"props":501,"children":502},{},[503,509,511,519],{"type":28,"tag":43,"props":504,"children":506},{"id":505},"garbage-collection",[507],{"type":34,"value":508},"Garbage Collection",{"type":34,"value":510},"Javascript uses an automatic garbage collection mechanism to free up memory that is no longer in use. The most common algorithm used is ",{"type":28,"tag":419,"props":512,"children":513},{},[514],{"type":28,"tag":419,"props":515,"children":516},{},[517],{"type":34,"value":518},"mark-and-sweep",{"type":28,"tag":399,"props":520,"children":521},{},[522,527,532],{"type":28,"tag":403,"props":523,"children":524},{},[525],{"type":34,"value":526},"The GC starts from the \"root\", (eg: windows in browser)",{"type":28,"tag":403,"props":528,"children":529},{},[530],{"type":34,"value":531},"It marks all objects that are reachable are considered unused",{"type":28,"tag":403,"props":533,"children":534},{},[535],{"type":34,"value":536},"The unused objects are removed, and their memory is reclaimed",{"type":28,"tag":403,"props":538,"children":539},{},[540,546],{"type":28,"tag":43,"props":541,"children":543},{"id":542},"memory-leaks",[544],{"type":34,"value":545},"Memory Leaks",{"type":28,"tag":399,"props":547,"children":548},{},[549,560,570,580,590],{"type":28,"tag":403,"props":550,"children":551},{},[552,558],{"type":28,"tag":553,"props":554,"children":555},"strong",{},[556],{"type":34,"value":557},"Global Variables",{"type":34,"value":559},": Variable unintentionally remain accessible throughout the program, preventing GC",{"type":28,"tag":403,"props":561,"children":562},{},[563,568],{"type":28,"tag":553,"props":564,"children":565},{},[566],{"type":34,"value":567},"Event Listeners",{"type":34,"value":569},": Un-removed event listeners can retain references to DOM elements, preventing then from being garbage collected",{"type":28,"tag":403,"props":571,"children":572},{},[573,578],{"type":28,"tag":553,"props":574,"children":575},{},[576],{"type":34,"value":577},"Closures",{"type":34,"value":579},": A Closures can inadvertently retain references to variables or objects that are no longer needed.",{"type":28,"tag":403,"props":581,"children":582},{},[583,588],{"type":28,"tag":553,"props":584,"children":585},{},[586],{"type":34,"value":587},"Detached DOM Elements",{"type":34,"value":589},": If a DOM element is removed from the DOM tree but still references in javascript, it won't be garbage collected.",{"type":28,"tag":403,"props":591,"children":592},{},[593,598],{"type":28,"tag":553,"props":594,"children":595},{},[596],{"type":34,"value":597},"Circular References",{"type":34,"value":599},": When two objects references each other, GC may not be able to determine that they are no longer need.",{"type":28,"tag":403,"props":601,"children":602},{},[603,609],{"type":28,"tag":43,"props":604,"children":606},{"id":605},"best-practice-for-effective-memory-management",[607],{"type":34,"value":608},"Best Practice for effective Memory management",{"type":28,"tag":399,"props":610,"children":611},{},[612,639,659,678,701,714],{"type":28,"tag":403,"props":613,"children":614},{},[615,623,625,630,632,637],{"type":28,"tag":553,"props":616,"children":617},{},[618],{"type":28,"tag":419,"props":619,"children":620},{},[621],{"type":34,"value":622},"Avoid Global variable",{"type":34,"value":624},": Use ",{"type":28,"tag":419,"props":626,"children":627},{},[628],{"type":34,"value":629},"let",{"type":34,"value":631}," or ",{"type":28,"tag":419,"props":633,"children":634},{},[635],{"type":34,"value":636},"const",{"type":34,"value":638}," to ensure variable block scoped",{"type":28,"tag":403,"props":640,"children":641},{},[642,650,652,657],{"type":28,"tag":553,"props":643,"children":644},{},[645],{"type":28,"tag":419,"props":646,"children":647},{},[648],{"type":34,"value":649},"Nullify References",{"type":34,"value":651},": Set variable to ",{"type":28,"tag":419,"props":653,"children":654},{},[655],{"type":34,"value":656},"null",{"type":34,"value":658}," when you are not using them, especially for large object",{"type":28,"tag":403,"props":660,"children":661},{},[662,670,671,676],{"type":28,"tag":553,"props":663,"children":664},{},[665],{"type":28,"tag":419,"props":666,"children":667},{},[668],{"type":34,"value":669},"Remove Event Listeners",{"type":34,"value":624},{"type":28,"tag":419,"props":672,"children":673},{},[674],{"type":34,"value":675},"removeEventListener()",{"type":34,"value":677}," to clean up unused listeners",{"type":28,"tag":403,"props":679,"children":680},{},[681,689,690,695,696],{"type":28,"tag":553,"props":682,"children":683},{},[684],{"type":28,"tag":419,"props":685,"children":686},{},[687],{"type":34,"value":688},"User weak references",{"type":34,"value":624},{"type":28,"tag":419,"props":691,"children":692},{},[693],{"type":34,"value":694},"WeakMap",{"type":34,"value":631},{"type":28,"tag":419,"props":697,"children":698},{},[699],{"type":34,"value":700},"WeakSet",{"type":28,"tag":403,"props":702,"children":703},{},[704,712],{"type":28,"tag":553,"props":705,"children":706},{},[707],{"type":28,"tag":419,"props":708,"children":709},{},[710],{"type":34,"value":711},"Optimize DOM Manipulation",{"type":34,"value":713},": Avoid creating unnecessary DOM elements and cleanup unused nodes",{"type":28,"tag":403,"props":715,"children":716},{},[717,725],{"type":28,"tag":553,"props":718,"children":719},{},[720],{"type":28,"tag":419,"props":721,"children":722},{},[723],{"type":34,"value":724},"Avoid circular references",{"type":34,"value":726},": Avoid creating mutual references",{"title":8,"searchDepth":13,"depth":13,"links":728},[729,731],{"id":31,"depth":730,"text":35},3,{"id":389,"depth":730,"text":392},"content:interviews:javascript:doc:basic.md","interviews/javascript/doc/basic.md","interviews/javascript/doc/basic",{"_path":736,"_dir":23,"_draft":7,"_partial":7,"_locale":8,"title":737,"description":8,"body":738,"_type":15,"_id":742,"_source":17,"_file":743,"_stem":744,"_extension":20},"/interviews/javascript/doc/generator-function","Generator functions",{"type":10,"children":739,"toc":740},[],{"title":8,"searchDepth":13,"depth":13,"links":741},[],"content:interviews:javascript:doc:generator-function.md","interviews/javascript/doc/generator-function.md","interviews/javascript/doc/generator-function",{"_path":746,"_dir":747,"_draft":7,"_partial":7,"_locale":8,"title":748,"description":8,"body":749,"_type":15,"_id":1241,"_source":17,"_file":1242,"_stem":1243,"_extension":20},"/interviews/javascript/doc","javascript","Javascript index",{"type":10,"children":750,"toc":1236},[751,757,763,791,798,811,817,845,851,856,862,868,873,883,897,907,964,970,975,981,986,991,1009,1018,1024,1029,1047,1053,1058,1064,1069,1078,1084,1105,1114,1120,1125,1134,1140,1145,1154,1173,1178,1187,1193,1198,1207,1213],{"type":28,"tag":752,"props":753,"children":754},"h1",{"id":747},[755],{"type":34,"value":756},"JavaScript",{"type":28,"tag":29,"props":758,"children":760},{"id":759},"microfrontend",[761],{"type":34,"value":762},"MicroFrontend",{"type":28,"tag":399,"props":764,"children":765},{},[766,771,776,781,786],{"type":28,"tag":403,"props":767,"children":768},{},[769],{"type":34,"value":770},"Independent Deployment : Each microfrontend (MFE) is an independent application",{"type":28,"tag":403,"props":772,"children":773},{},[774],{"type":34,"value":775},"Integration: MEFs can be  composed to create a cohesive user experience",{"type":28,"tag":403,"props":777,"children":778},{},[779],{"type":34,"value":780},"Technology Agnostic:  Any modern JS Framework can be used",{"type":28,"tag":403,"props":782,"children":783},{},[784],{"type":34,"value":785},"Routing: Typically managed by shell, host or main application",{"type":28,"tag":403,"props":787,"children":788},{},[789],{"type":34,"value":790},"Communication: MEFs communicate using events, props, shared state management, web storage, Server session",{"type":28,"tag":792,"props":793,"children":795},"h4",{"id":794},"popular-tools",[796],{"type":34,"value":797},"Popular Tools",{"type":28,"tag":399,"props":799,"children":800},{},[801,806],{"type":28,"tag":403,"props":802,"children":803},{},[804],{"type":34,"value":805},"Webpack modular federation",{"type":28,"tag":403,"props":807,"children":808},{},[809],{"type":34,"value":810},"Single SPA",{"type":28,"tag":792,"props":812,"children":814},{"id":813},"communication",[815],{"type":34,"value":816},"Communication",{"type":28,"tag":399,"props":818,"children":819},{},[820,825,830,835,840],{"type":28,"tag":403,"props":821,"children":822},{},[823],{"type":34,"value":824},"Browser events",{"type":28,"tag":403,"props":826,"children":827},{},[828],{"type":34,"value":829},"Browser storage",{"type":28,"tag":403,"props":831,"children":832},{},[833],{"type":34,"value":834},"Shared state management",{"type":28,"tag":403,"props":836,"children":837},{},[838],{"type":34,"value":839},"Server APIs and session",{"type":28,"tag":403,"props":841,"children":842},{},[843],{"type":34,"value":844},"URL queries",{"type":28,"tag":29,"props":846,"children":848},{"id":847},"singleton",[849],{"type":34,"value":850},"Singleton",{"type":28,"tag":37,"props":852,"children":853},{},[854],{"type":34,"value":855},"It is a design pattern that ensures a class or module has only one instance and provides a global of access to that instance. This is useful when you want to maintain a single shared state or configuration\nExample: Redux, Global State",{"type":28,"tag":29,"props":857,"children":859},{"id":858},"promise-async-await",[860],{"type":34,"value":861},"Promise, Async- Await",{"type":28,"tag":43,"props":863,"children":865},{"id":864},"promise",[866],{"type":34,"value":867},"Promise",{"type":28,"tag":37,"props":869,"children":870},{},[871],{"type":34,"value":872},"A promise in Javascript is a way to handle asynchronous operations. It can be in one of three states:\npending, resolved or rejected",{"type":28,"tag":154,"props":874,"children":878},{"className":875,"code":877,"language":747,"meta":8},[876],"language-javascript","\nconst myPromise = new Promise((resolve, reject) => {\n    const success = true;\n    if(success){\n        resolve('Success')\n    }else{\n        reject('Error')\n    }\n})\n\n",[879],{"type":28,"tag":159,"props":880,"children":881},{"__ignoreMap":8},[882],{"type":34,"value":877},{"type":28,"tag":399,"props":884,"children":885},{},[886],{"type":28,"tag":403,"props":887,"children":888},{},[889,891],{"type":34,"value":890},"Chaining ",{"type":28,"tag":159,"props":892,"children":894},{"className":893},[],[895],{"type":34,"value":896},".then()",{"type":28,"tag":37,"props":898,"children":899},{},[900,905],{"type":28,"tag":159,"props":901,"children":903},{"className":902},[],[904],{"type":34,"value":896},{"type":34,"value":906},", used to chain promises",{"type":28,"tag":399,"props":908,"children":909},{},[910,925,944,954],{"type":28,"tag":403,"props":911,"children":912},{},[913,918,920],{"type":28,"tag":553,"props":914,"children":915},{},[916],{"type":34,"value":917},"Promise.all()",{"type":34,"value":919},":  Handling multiple promises with ",{"type":28,"tag":159,"props":921,"children":923},{"className":922},[],[924],{"type":34,"value":917},{"type":28,"tag":403,"props":926,"children":927},{},[928,933,935],{"type":28,"tag":553,"props":929,"children":930},{},[931],{"type":34,"value":932},"Promise.allSettled()",{"type":34,"value":934},": Resolved when all promises settled(fulfilled or rejected)\n",{"type":28,"tag":154,"props":936,"children":939},{"className":937,"code":938,"language":747,"meta":8},[876],"  const responseAll = await Promise.allSettled([new Promise(), new Promise(), new Promise()]);\n  responseAll.forEach((result, reject) => {\n    if(result.status === 'fulfilled'){\n      // Success \n    } else {\n      // Error \n    }\n  })\n",[940],{"type":28,"tag":159,"props":941,"children":942},{"__ignoreMap":8},[943],{"type":34,"value":938},{"type":28,"tag":403,"props":945,"children":946},{},[947,952],{"type":28,"tag":553,"props":948,"children":949},{},[950],{"type":34,"value":951},"Promise.race()",{"type":34,"value":953},": Resolves/Rejects as soon as the first promise settles",{"type":28,"tag":403,"props":955,"children":956},{},[957,962],{"type":28,"tag":553,"props":958,"children":959},{},[960],{"type":34,"value":961},"Promise.any()",{"type":34,"value":963},": Resolves as soon as the first promise resolves; reject if all promise reject",{"type":28,"tag":43,"props":965,"children":967},{"id":966},"prototype",[968],{"type":34,"value":969},"Prototype",{"type":28,"tag":37,"props":971,"children":972},{},[973],{"type":34,"value":974},"In Javascript, a prototype is an object that acts as a blueprint for other projects. Every Javascript object has a prototype\nfrom which it can inherit properties and methods. This mechanism is part of Javascript's prototype inheritance, which\nallows objects to share properties and methods without duplication",{"type":28,"tag":43,"props":976,"children":978},{"id":977},"closure",[979],{"type":34,"value":980},"Closure",{"type":28,"tag":37,"props":982,"children":983},{},[984],{"type":34,"value":985},"A closure in JavaScript is a feature that allows a function to \"remember\" the variables from its surrounding scope, even after the outer function has finished executing. Closures are created every time a function is defined inside another function, and the inner function accesses variables from the outer function's scope.",{"type":28,"tag":37,"props":987,"children":988},{},[989],{"type":34,"value":990},"Key Concepts",{"type":28,"tag":399,"props":992,"children":993},{},[994,999,1004],{"type":28,"tag":403,"props":995,"children":996},{},[997],{"type":34,"value":998},"Function within a function: A closure is created when a function is defined inside another function.",{"type":28,"tag":403,"props":1000,"children":1001},{},[1002],{"type":34,"value":1003},"Access to outer variables: The inner function can access variables declared in the outer function, even after the outer function has returned.",{"type":28,"tag":403,"props":1005,"children":1006},{},[1007],{"type":34,"value":1008},"Encapsulation: Closures allow you to create private variables that cannot be accessed from outside the enclosing function.",{"type":28,"tag":154,"props":1010,"children":1013},{"className":1011,"code":1012,"language":747,"meta":8},[876],"function outerFunction() {\n  let outerVariable = \"I'm from outer function!\";\n\n  function innerFunction() {\n    console.log(outerVariable); // Accesses the outer function's variable\n  }\n\n  return innerFunction;\n}\n\nconst myClosure = outerFunction(); // Returns the inner function\nmyClosure(); // Logs: \"I'm from outer function!\"\n",[1014],{"type":28,"tag":159,"props":1015,"children":1016},{"__ignoreMap":8},[1017],{"type":34,"value":1012},{"type":28,"tag":43,"props":1019,"children":1021},{"id":1020},"currying",[1022],{"type":34,"value":1023},"Currying",{"type":28,"tag":37,"props":1025,"children":1026},{},[1027],{"type":34,"value":1028},"Currying in JavaScript is a functional programming technique where a function is transformed into a series of functions, each taking a single argument. Instead of taking all arguments at once, the function takes one argument, then returns another function that takes the next argument, and so on, until all arguments have been provided.",{"type":28,"tag":399,"props":1030,"children":1031},{},[1032,1037,1042],{"type":28,"tag":403,"props":1033,"children":1034},{},[1035],{"type":34,"value":1036},"Reusability: You can create specialized functions by providing some of the arguments upfront.",{"type":28,"tag":403,"props":1038,"children":1039},{},[1040],{"type":34,"value":1041},"Readability: Currying can make code more declarative and expressive.",{"type":28,"tag":403,"props":1043,"children":1044},{},[1045],{"type":34,"value":1046},"Avoiding repetition: Useful for scenarios where a function is frequently called with the same initial arguments.",{"type":28,"tag":43,"props":1048,"children":1050},{"id":1049},"handle-memory-leak-in-javascript",[1051],{"type":34,"value":1052},"Handle Memory Leak in JavaScript",{"type":28,"tag":37,"props":1054,"children":1055},{},[1056],{"type":34,"value":1057},"A memory leak in JavaScript occurs when memory that is no longer needed is not released, preventing the garbage collector from reclaiming it. This leads to increased memory usage over time, which can cause performance degradation or even application crashes.",{"type":28,"tag":1059,"props":1060,"children":1062},"h6",{"id":1061},"global-variables",[1063],{"type":34,"value":557},{"type":28,"tag":37,"props":1065,"children":1066},{},[1067],{"type":34,"value":1068},"Unintentionally declared variables are added to the global scope and persist for the lifetime of the application.",{"type":28,"tag":154,"props":1070,"children":1073},{"className":1071,"code":1072,"language":747,"meta":8},[876],"\nfunction someEvents(){\n    isItAGlobalVariable = 'Some thing '; // no var, let, const, it will act as global variable \n}\n\nsomeEvents()\n\n",[1074],{"type":28,"tag":159,"props":1075,"children":1076},{"__ignoreMap":8},[1077],{"type":34,"value":1072},{"type":28,"tag":1059,"props":1079,"children":1081},{"id":1080},"clear-timers-or-intervals",[1082],{"type":34,"value":1083},"Clear Timers or Intervals",{"type":28,"tag":37,"props":1085,"children":1086},{},[1087,1089,1095,1097,1103],{"type":34,"value":1088},"Unused ",{"type":28,"tag":159,"props":1090,"children":1092},{"className":1091},[],[1093],{"type":34,"value":1094},"setInterval",{"type":34,"value":1096}," and ",{"type":28,"tag":159,"props":1098,"children":1100},{"className":1099},[],[1101],{"type":34,"value":1102},"setTimeout",{"type":34,"value":1104}," references keep running even after they are no longer needed.",{"type":28,"tag":154,"props":1106,"children":1109},{"className":1107,"code":1108,"language":747,"meta":8},[876],"let intervalId = setInterval(() => console.log('Still running'), 1000);\nclearInterval(intervalId)\n",[1110],{"type":28,"tag":159,"props":1111,"children":1112},{"__ignoreMap":8},[1113],{"type":34,"value":1108},{"type":28,"tag":1059,"props":1115,"children":1117},{"id":1116},"detached-dom-events",[1118],{"type":34,"value":1119},"Detached DOM Events",{"type":28,"tag":37,"props":1121,"children":1122},{},[1123],{"type":34,"value":1124},"Retaining references to DOM elements that are removed from the document",{"type":28,"tag":154,"props":1126,"children":1129},{"className":1127,"code":1128,"language":747,"meta":8},[876],"let node = document.createElement('div');\ndocument.body.appendChild(node);\ndocument.body.removeChild(node);\nnode = null; \n",[1130],{"type":28,"tag":159,"props":1131,"children":1132},{"__ignoreMap":8},[1133],{"type":34,"value":1128},{"type":28,"tag":1059,"props":1135,"children":1137},{"id":1136},"event-listener",[1138],{"type":34,"value":1139},"Event listener",{"type":28,"tag":37,"props":1141,"children":1142},{},[1143],{"type":34,"value":1144},"Event listeners attached to elements can prevent garbage collection if not removed",{"type":28,"tag":154,"props":1146,"children":1149},{"className":1147,"code":1148,"language":747,"meta":8},[876],"  const button = document.getElementById(\"myButton\");\n  function handleClick() {\n      console.log(\"Clicked!\");\n  }\n  button.addEventListener(\"click\", handleClick);\n  button.removeEventListener(\"click\", handleClick); // Clean up when done\n",[1150],{"type":28,"tag":159,"props":1151,"children":1152},{"__ignoreMap":8},[1153],{"type":34,"value":1148},{"type":28,"tag":1059,"props":1155,"children":1157},{"id":1156},"use-weakmap-and-weakset-for-object-reference",[1158,1160,1165,1166,1171],{"type":34,"value":1159},"Use ",{"type":28,"tag":159,"props":1161,"children":1163},{"className":1162},[],[1164],{"type":34,"value":694},{"type":34,"value":1096},{"type":28,"tag":159,"props":1167,"children":1169},{"className":1168},[],[1170],{"type":34,"value":700},{"type":34,"value":1172}," for object reference",{"type":28,"tag":37,"props":1174,"children":1175},{},[1176],{"type":34,"value":1177},"Unlike Map or Set, these structures do not prevent garbage collection of keys.",{"type":28,"tag":154,"props":1179,"children":1182},{"className":1180,"code":1181,"language":747,"meta":8},[876],"  const weakMap = new WeakMap();\n  let obj = {};\n  weakMap.set(obj, \"value\");\n  obj = null; // Now the object can be garbage collected\n",[1183],{"type":28,"tag":159,"props":1184,"children":1185},{"__ignoreMap":8},[1186],{"type":34,"value":1181},{"type":28,"tag":1059,"props":1188,"children":1190},{"id":1189},"use-a-garbage-collection-controller",[1191],{"type":34,"value":1192},"Use a Garbage Collection Controller",{"type":28,"tag":37,"props":1194,"children":1195},{},[1196],{"type":34,"value":1197},"Trigger garbage collection manually (only for debugging purposes) using",{"type":28,"tag":154,"props":1199,"children":1202},{"className":1200,"code":1201,"language":747,"meta":8},[876],"  if (window.gc) {\n      gc(); // Requires the browser to be started with special flags\n  }\n",[1203],{"type":28,"tag":159,"props":1204,"children":1205},{"__ignoreMap":8},[1206],{"type":34,"value":1201},{"type":28,"tag":1059,"props":1208,"children":1210},{"id":1209},"best-practices",[1211],{"type":34,"value":1212},"Best Practices",{"type":28,"tag":399,"props":1214,"children":1215},{},[1216,1221,1226,1231],{"type":28,"tag":403,"props":1217,"children":1218},{},[1219],{"type":34,"value":1220},"Minimize Long-Lived References: Avoid keeping objects alive longer than necessary.",{"type":28,"tag":403,"props":1222,"children":1223},{},[1224],{"type":34,"value":1225},"Use Weak References: Replace Map or Set with WeakMap or WeakSet for objects.",{"type":28,"tag":403,"props":1227,"children":1228},{},[1229],{"type":34,"value":1230},"Monitor Application Performance: Regularly check memory usage in development.",{"type":28,"tag":403,"props":1232,"children":1233},{},[1234],{"type":34,"value":1235},"Test for Memory Leaks: Use tools like Chrome DevTools or libraries like leak-canary for testing.",{"title":8,"searchDepth":13,"depth":13,"links":1237},[1238,1239,1240],{"id":759,"depth":730,"text":762},{"id":847,"depth":730,"text":850},{"id":858,"depth":730,"text":861},"content:interviews:javascript:doc:index.md","interviews/javascript/doc/index.md","interviews/javascript/doc/index",{"_path":1245,"_dir":23,"_draft":7,"_partial":7,"_locale":8,"title":1246,"description":8,"body":1247,"_type":15,"_id":1750,"_source":17,"_file":1751,"_stem":1752,"_extension":20},"/interviews/javascript/doc/vdom-dom","DOM vs Virtual DOM",{"type":10,"children":1248,"toc":1745},[1249,1255,1261,1294,1300,1330,1505,1511,1536,1542,1626,1632,1697,1703,1726,1732],{"type":28,"tag":752,"props":1250,"children":1252},{"id":1251},"dom-document-object-model-and-v-dom-virtual-dom",[1253],{"type":34,"value":1254},"DOM (Document Object Model) and V-DOM( Virtual DOM)",{"type":28,"tag":29,"props":1256,"children":1258},{"id":1257},"dom-document-object-model",[1259],{"type":34,"value":1260},"DOM (Document Object Model)",{"type":28,"tag":399,"props":1262,"children":1263},{},[1264,1274,1284],{"type":28,"tag":403,"props":1265,"children":1266},{},[1267,1272],{"type":28,"tag":553,"props":1268,"children":1269},{},[1270],{"type":34,"value":1271},"Definition",{"type":34,"value":1273},": The DOM is a programming interface for HTML and XML documents. It represents the\nstructure of the document as a tree of objects that can be manipulated.",{"type":28,"tag":403,"props":1275,"children":1276},{},[1277,1282],{"type":28,"tag":553,"props":1278,"children":1279},{},[1280],{"type":34,"value":1281},"Nature",{"type":34,"value":1283},": Real time and browser specific. Changes directly update the UI",{"type":28,"tag":403,"props":1285,"children":1286},{},[1287,1292],{"type":28,"tag":553,"props":1288,"children":1289},{},[1290],{"type":34,"value":1291},"Performance",{"type":34,"value":1293},": Modifying the DOM can be show because it involves immediate updates to the actual structure\nof the page in the browser, including layout recalculations and rendering",{"type":28,"tag":29,"props":1295,"children":1297},{"id":1296},"virtual-dom-document-object-model",[1298],{"type":34,"value":1299},"Virtual DOM (Document Object Model)",{"type":28,"tag":399,"props":1301,"children":1302},{},[1303,1312,1321],{"type":28,"tag":403,"props":1304,"children":1305},{},[1306,1310],{"type":28,"tag":553,"props":1307,"children":1308},{},[1309],{"type":34,"value":1271},{"type":34,"value":1311},": The Virtual DOM is an abstraction of the DOM. It is a lightweight copy of the actual DOM, used\nmainly in modern frameworks like React",{"type":28,"tag":403,"props":1313,"children":1314},{},[1315,1319],{"type":28,"tag":553,"props":1316,"children":1317},{},[1318],{"type":34,"value":1281},{"type":34,"value":1320},": Exists only in memory and never interacts directly with the browser",{"type":28,"tag":403,"props":1322,"children":1323},{},[1324,1328],{"type":28,"tag":553,"props":1325,"children":1326},{},[1327],{"type":34,"value":1291},{"type":34,"value":1329},": Faster updates as changes are computed in memory first. The difference between the previous and updated Virtual DOM are calculated, and only the necessary changes are applied to the real DOM",{"type":28,"tag":1331,"props":1332,"children":1333},"table",{},[1334,1358],{"type":28,"tag":1335,"props":1336,"children":1337},"thead",{},[1338],{"type":28,"tag":1339,"props":1340,"children":1341},"tr",{},[1342,1348,1353],{"type":28,"tag":1343,"props":1344,"children":1345},"th",{},[1346],{"type":34,"value":1347},"Feature",{"type":28,"tag":1343,"props":1349,"children":1350},{},[1351],{"type":34,"value":1352},"DOM",{"type":28,"tag":1343,"props":1354,"children":1355},{},[1356],{"type":34,"value":1357},"Virtual DOM",{"type":28,"tag":1359,"props":1360,"children":1361},"tbody",{},[1362,1380,1397,1415,1433,1451,1469,1487],{"type":28,"tag":1339,"props":1363,"children":1364},{},[1365,1370,1375],{"type":28,"tag":1366,"props":1367,"children":1368},"td",{},[1369],{"type":34,"value":1271},{"type":28,"tag":1366,"props":1371,"children":1372},{},[1373],{"type":34,"value":1374},"Real DOM in the browser",{"type":28,"tag":1366,"props":1376,"children":1377},{},[1378],{"type":34,"value":1379},"In memory abstraction of DOM",{"type":28,"tag":1339,"props":1381,"children":1382},{},[1383,1387,1392],{"type":28,"tag":1366,"props":1384,"children":1385},{},[1386],{"type":34,"value":1291},{"type":28,"tag":1366,"props":1388,"children":1389},{},[1390],{"type":34,"value":1391},"Direct updates, slower",{"type":28,"tag":1366,"props":1393,"children":1394},{},[1395],{"type":34,"value":1396},"Efficient updates, faster",{"type":28,"tag":1339,"props":1398,"children":1399},{},[1400,1405,1410],{"type":28,"tag":1366,"props":1401,"children":1402},{},[1403],{"type":34,"value":1404},"Repainting/Reflowing",{"type":28,"tag":1366,"props":1406,"children":1407},{},[1408],{"type":34,"value":1409},"Immediate, often ineffient",{"type":28,"tag":1366,"props":1411,"children":1412},{},[1413],{"type":34,"value":1414},"Batched and optimized",{"type":28,"tag":1339,"props":1416,"children":1417},{},[1418,1423,1428],{"type":28,"tag":1366,"props":1419,"children":1420},{},[1421],{"type":34,"value":1422},"Ease of use",{"type":28,"tag":1366,"props":1424,"children":1425},{},[1426],{"type":34,"value":1427},"Manual updates",{"type":28,"tag":1366,"props":1429,"children":1430},{},[1431],{"type":34,"value":1432},"Automatic updates via framwork",{"type":28,"tag":1339,"props":1434,"children":1435},{},[1436,1441,1446],{"type":28,"tag":1366,"props":1437,"children":1438},{},[1439],{"type":34,"value":1440},"Frameworks/Tech",{"type":28,"tag":1366,"props":1442,"children":1443},{},[1444],{"type":34,"value":1445},"Native Javascript, jQuery",{"type":28,"tag":1366,"props":1447,"children":1448},{},[1449],{"type":34,"value":1450},"React, Vue, etc",{"type":28,"tag":1339,"props":1452,"children":1453},{},[1454,1459,1464],{"type":28,"tag":1366,"props":1455,"children":1456},{},[1457],{"type":34,"value":1458},"Copies",{"type":28,"tag":1366,"props":1460,"children":1461},{},[1462],{"type":34,"value":1463},"DOM , only one Copy",{"type":28,"tag":1366,"props":1465,"children":1466},{},[1467],{"type":34,"value":1468},"Two for diffing (old and new) per framework instance",{"type":28,"tag":1339,"props":1470,"children":1471},{},[1472,1477,1482],{"type":28,"tag":1366,"props":1473,"children":1474},{},[1475],{"type":34,"value":1476},"Memory Usage",{"type":28,"tag":1366,"props":1478,"children":1479},{},[1480],{"type":34,"value":1481},"Heavy, as it includes the full document structure",{"type":28,"tag":1366,"props":1483,"children":1484},{},[1485],{"type":34,"value":1486},"Lightweight as it's just a Javascript object",{"type":28,"tag":1339,"props":1488,"children":1489},{},[1490,1495,1500],{"type":28,"tag":1366,"props":1491,"children":1492},{},[1493],{"type":34,"value":1494},"Algoritham",{"type":28,"tag":1366,"props":1496,"children":1497},{},[1498],{"type":34,"value":1499},"No algoritham",{"type":28,"tag":1366,"props":1501,"children":1502},{},[1503],{"type":34,"value":1504},"Diffing algoritham",{"type":28,"tag":29,"props":1506,"children":1508},{"id":1507},"how-virtual-dom-work",[1509],{"type":34,"value":1510},"How Virtual DOM work",{"type":28,"tag":37,"props":1512,"children":1513},{},[1514,1516,1521,1523,1528,1530,1534],{"type":34,"value":1515},"DOM is a real and single,  it directly deals with browser rendering engine. When there are changes, whenever changes happen it update\nimmediately, every update can potentially trigger expensive operations like ",{"type":28,"tag":553,"props":1517,"children":1518},{},[1519],{"type":34,"value":1520},"reflow",{"type":34,"value":1522}," (layout re calculation) and ",{"type":28,"tag":553,"props":1524,"children":1525},{},[1526],{"type":34,"value":1527},"repaint",{"type":34,"value":1529}," (visual updates).\nThe ",{"type":28,"tag":553,"props":1531,"children":1532},{},[1533],{"type":34,"value":1357},{"type":34,"value":1535},", avoids these frequent and costly reflow and repaint by calculating changes in the memory and only applying minimal updated to\nreal DOM. It also update in batch and not every single changes.",{"type":28,"tag":43,"props":1537,"children":1539},{"id":1538},"why-reflow-and-repaints-are-heavy",[1540],{"type":34,"value":1541},"Why Reflow and Repaints are heavy",{"type":28,"tag":1543,"props":1544,"children":1545},"ol",{},[1546,1595],{"type":28,"tag":403,"props":1547,"children":1548},{},[1549,1551],{"type":34,"value":1550},"Reflow (Layout calculation)\n",{"type":28,"tag":399,"props":1552,"children":1553},{},[1554,1577],{"type":28,"tag":403,"props":1555,"children":1556},{},[1557,1559],{"type":34,"value":1558},"Reflow occur when the browser recalculates the positions and dimensions of elements on the page.\n",{"type":28,"tag":399,"props":1560,"children":1561},{},[1562,1567,1572],{"type":28,"tag":403,"props":1563,"children":1564},{},[1565],{"type":34,"value":1566},"Elements size (eg, width and height)",{"type":28,"tag":403,"props":1568,"children":1569},{},[1570],{"type":34,"value":1571},"Layout affecting properties (eg: margin, padding, border)",{"type":28,"tag":403,"props":1573,"children":1574},{},[1575],{"type":34,"value":1576},"DOM structure (eg, add/remove/modify nodes)",{"type":28,"tag":403,"props":1578,"children":1579},{},[1580,1582],{"type":34,"value":1581},"Impact\n",{"type":28,"tag":399,"props":1583,"children":1584},{},[1585,1590],{"type":28,"tag":403,"props":1586,"children":1587},{},[1588],{"type":34,"value":1589},"Reflow can cascade, if a parent element's size changes,all child elements must be recalculated",{"type":28,"tag":403,"props":1591,"children":1592},{},[1593],{"type":34,"value":1594},"On large, complex pages, this recalculation become costly",{"type":28,"tag":403,"props":1596,"children":1597},{},[1598,1600],{"type":34,"value":1599},"Repaint (Visual calculation, no layout)\n",{"type":28,"tag":399,"props":1601,"children":1602},{},[1603],{"type":28,"tag":403,"props":1604,"children":1605},{},[1606,1608],{"type":34,"value":1607},"A Repaint occur in browser whenever visual elements on the screen change in a way that it doesn't affect layout (color changes, visibility changes, text font changes).Repainting is less expensive that reflow, it still consumes resource\n",{"type":28,"tag":399,"props":1609,"children":1610},{},[1611,1616,1621],{"type":28,"tag":403,"props":1612,"children":1613},{},[1614],{"type":34,"value":1615},"Frequent Update: If you frequently change styles and trigger repaints, the browser will repeatedly refresh and affects parts of the screen, consuming CPU, Memory and GPU",{"type":28,"tag":403,"props":1617,"children":1618},{},[1619],{"type":34,"value":1620},"Large Areas: When repainting affects large portions of the screen or element with complex styles, it becomes more computationally expensive.",{"type":28,"tag":403,"props":1622,"children":1623},{},[1624],{"type":34,"value":1625},"Inefficient DOM manipulations: Direct DOM updates or uncontrolled rendering can lead to unnecessary repaints.",{"type":28,"tag":792,"props":1627,"children":1629},{"id":1628},"how-virtual-dom-solve-reflow-and-repaint",[1630],{"type":34,"value":1631},"How Virtual DOM solve reflow and repaint",{"type":28,"tag":399,"props":1633,"children":1634},{},[1635,1658,1671,1684],{"type":28,"tag":403,"props":1636,"children":1637},{},[1638,1640],{"type":34,"value":1639},"Efficient Diffing Algorithm:\n",{"type":28,"tag":399,"props":1641,"children":1642},{},[1643,1648,1653],{"type":28,"tag":403,"props":1644,"children":1645},{},[1646],{"type":34,"value":1647},"React maintain lightweight copy of DOM in memory, which is called Virtual DOM. It available in memory",{"type":28,"tag":403,"props":1649,"children":1650},{},[1651],{"type":34,"value":1652},"Multiple copies of Virtual DOM at least 2 per instance, when state, props or anything changes , React recalculate the difference by comparing old and new virtual DOM.",{"type":28,"tag":403,"props":1654,"children":1655},{},[1656],{"type":34,"value":1657},"Only the part of the DOM that have changed are updated in the real DOM, minimizing repaint or reflow",{"type":28,"tag":403,"props":1659,"children":1660},{},[1661,1663],{"type":34,"value":1662},"Batching Updates:\n",{"type":28,"tag":399,"props":1664,"children":1665},{},[1666],{"type":28,"tag":403,"props":1667,"children":1668},{},[1669],{"type":34,"value":1670},"React batches state and props updates to perform the together,reducing number of DOM updates and subsequent repaint",{"type":28,"tag":403,"props":1672,"children":1673},{},[1674,1676],{"type":34,"value":1675},"Controlled Updates:\n",{"type":28,"tag":399,"props":1677,"children":1678},{},[1679],{"type":28,"tag":403,"props":1680,"children":1681},{},[1682],{"type":34,"value":1683},"React component life cycle methods and hooks allow developers to prevent unnecessary re-renders.",{"type":28,"tag":403,"props":1685,"children":1686},{},[1687,1689],{"type":34,"value":1688},"Reconciliation:\n",{"type":28,"tag":399,"props":1690,"children":1691},{},[1692],{"type":28,"tag":403,"props":1693,"children":1694},{},[1695],{"type":34,"value":1696},"React reconciliation process ensure that the real DOM is updated as efficiently as possible. It minimizes both number and scope of repaints by targeting only the changed element.",{"type":28,"tag":792,"props":1698,"children":1700},{"id":1699},"advantages-of-virtual-dom",[1701],{"type":34,"value":1702},"Advantages of Virtual DOM",{"type":28,"tag":399,"props":1704,"children":1705},{},[1706,1711,1716,1721],{"type":28,"tag":403,"props":1707,"children":1708},{},[1709],{"type":34,"value":1710},"Improved performance: Reduced costly DOM manipulations by batching updates",{"type":28,"tag":403,"props":1712,"children":1713},{},[1714],{"type":34,"value":1715},"Simplified Development: Developers focus on component logic, leaving optimization to React",{"type":28,"tag":403,"props":1717,"children":1718},{},[1719],{"type":34,"value":1720},"Consistent Rendering: Abstract browser specific rendering, ensuring uniform performance",{"type":28,"tag":403,"props":1722,"children":1723},{},[1724],{"type":34,"value":1725},"Better user experience: Faster updates lead to smoother interaction and enhance user satisfaction.",{"type":28,"tag":792,"props":1727,"children":1729},{"id":1728},"disadvantages-of-virtual-dom",[1730],{"type":34,"value":1731},"Disadvantages of Virtual DOM",{"type":28,"tag":399,"props":1733,"children":1734},{},[1735,1740],{"type":28,"tag":403,"props":1736,"children":1737},{},[1738],{"type":34,"value":1739},"Memory overhead: Maintaining Virtual DOM tree consumes additional memory.",{"type":28,"tag":403,"props":1741,"children":1742},{},[1743],{"type":34,"value":1744},"Not always Optimal: For very simple application, like Static Sites, Virtual DOM may introduce unnecessary overload",{"title":8,"searchDepth":13,"depth":13,"links":1746},[1747,1748,1749],{"id":1257,"depth":730,"text":1260},{"id":1296,"depth":730,"text":1299},{"id":1507,"depth":730,"text":1510},"content:interviews:javascript:doc:vdom-dom.md","interviews/javascript/doc/vdom-dom.md","interviews/javascript/doc/vdom-dom",{"_path":1754,"_dir":23,"_draft":7,"_partial":7,"_locale":8,"title":1755,"description":1756,"body":1757,"_type":15,"_id":2005,"_source":17,"_file":2006,"_stem":2007,"_extension":20},"/interviews/react/doc/hooks","React hooks","React hooks are functions that let you use React State, Lifecycle features, and other React capabilities in functional components.",{"type":10,"children":1758,"toc":2001},[1759,1765,1784,1790,1800,1808,1819,1829,1837,1846,1856,1864,1873,1879,1889,1897,1906,1916,1924,1933,1943,1951,1960,1965,1974,1984,1992],{"type":28,"tag":752,"props":1760,"children":1762},{"id":1761},"react-hooks",[1763],{"type":34,"value":1764},"React Hooks",{"type":28,"tag":37,"props":1766,"children":1767},{},[1768,1770,1775,1777,1782],{"type":34,"value":1769},"React hooks are functions that let you use ",{"type":28,"tag":553,"props":1771,"children":1772},{},[1773],{"type":34,"value":1774},"React State",{"type":34,"value":1776},", ",{"type":28,"tag":553,"props":1778,"children":1779},{},[1780],{"type":34,"value":1781},"Lifecycle features",{"type":34,"value":1783},", and other React capabilities in functional components.",{"type":28,"tag":29,"props":1785,"children":1787},{"id":1786},"common-hooks",[1788],{"type":34,"value":1789},"Common Hooks",{"type":28,"tag":792,"props":1791,"children":1793},{"id":1792},"usestate",[1794],{"type":28,"tag":159,"props":1795,"children":1797},{"className":1796},[],[1798],{"type":34,"value":1799},"useState",{"type":28,"tag":399,"props":1801,"children":1802},{},[1803],{"type":28,"tag":403,"props":1804,"children":1805},{},[1806],{"type":34,"value":1807},"Manage state in function component",{"type":28,"tag":154,"props":1809,"children":1814},{"className":1810,"code":1812,"language":1813,"meta":8},[1811],"language-react","const [state, setState] = useState(\u003CINITIAL VALUE>);\n\nsetState(\u003CUPDATED VALUE>);\n\n","react",[1815],{"type":28,"tag":159,"props":1816,"children":1817},{"__ignoreMap":8},[1818],{"type":34,"value":1812},{"type":28,"tag":792,"props":1820,"children":1822},{"id":1821},"useeffect",[1823],{"type":28,"tag":159,"props":1824,"children":1826},{"className":1825},[],[1827],{"type":34,"value":1828},"useEffect",{"type":28,"tag":399,"props":1830,"children":1831},{},[1832],{"type":28,"tag":403,"props":1833,"children":1834},{},[1835],{"type":34,"value":1836},"Handles side effects like data fetching, subscriptions, and manual DOM manipulations.",{"type":28,"tag":154,"props":1838,"children":1841},{"className":1839,"code":1840,"language":1813,"meta":8},[1811],"useEffect(() => {\n    // mount \n    return () => {\n        // unmount\n    }\n}, [DEPENDANCY ARRAY])\n\n",[1842],{"type":28,"tag":159,"props":1843,"children":1844},{"__ignoreMap":8},[1845],{"type":34,"value":1840},{"type":28,"tag":792,"props":1847,"children":1849},{"id":1848},"usecontext",[1850],{"type":28,"tag":159,"props":1851,"children":1853},{"className":1852},[],[1854],{"type":34,"value":1855},"useContext",{"type":28,"tag":399,"props":1857,"children":1858},{},[1859],{"type":28,"tag":403,"props":1860,"children":1861},{},[1862],{"type":34,"value":1863},"Accesses context values without the need for a Consumer component.",{"type":28,"tag":154,"props":1865,"children":1868},{"className":1866,"code":1867,"language":1813,"meta":8},[1811],"    const value = useContext(MyContext)\n",[1869],{"type":28,"tag":159,"props":1870,"children":1871},{"__ignoreMap":8},[1872],{"type":34,"value":1867},{"type":28,"tag":29,"props":1874,"children":1876},{"id":1875},"performance-hooks",[1877],{"type":34,"value":1878},"Performance Hooks",{"type":28,"tag":792,"props":1880,"children":1882},{"id":1881},"usememo",[1883],{"type":28,"tag":159,"props":1884,"children":1886},{"className":1885},[],[1887],{"type":34,"value":1888},"useMemo",{"type":28,"tag":399,"props":1890,"children":1891},{},[1892],{"type":28,"tag":403,"props":1893,"children":1894},{},[1895],{"type":34,"value":1896},"Memoizes a value to optimize performance for expensive calculations.",{"type":28,"tag":154,"props":1898,"children":1901},{"className":1899,"code":1900,"language":1813,"meta":8},[1811],"    const [ number, setNumber] = useState(0);\n    setNumber(3)\n    const doubleNumber = useMemo(() => {\n        return number * 2;\n    }, [ number])\n",[1902],{"type":28,"tag":159,"props":1903,"children":1904},{"__ignoreMap":8},[1905],{"type":34,"value":1900},{"type":28,"tag":792,"props":1907,"children":1909},{"id":1908},"usecallback",[1910],{"type":28,"tag":159,"props":1911,"children":1913},{"className":1912},[],[1914],{"type":34,"value":1915},"useCallback",{"type":28,"tag":399,"props":1917,"children":1918},{},[1919],{"type":28,"tag":403,"props":1920,"children":1921},{},[1922],{"type":34,"value":1923},"Memoizes a function to prevent unnecessary re-creations.",{"type":28,"tag":154,"props":1925,"children":1928},{"className":1926,"code":1927,"language":1813,"meta":8},[1811],"    const memoizedFunction = useCallback(() => {\n    \n    }, [ dependency ])\n",[1929],{"type":28,"tag":159,"props":1930,"children":1931},{"__ignoreMap":8},[1932],{"type":34,"value":1927},{"type":28,"tag":792,"props":1934,"children":1936},{"id":1935},"usetransition",[1937],{"type":28,"tag":159,"props":1938,"children":1940},{"className":1939},[],[1941],{"type":34,"value":1942},"useTransition",{"type":28,"tag":399,"props":1944,"children":1945},{},[1946],{"type":28,"tag":403,"props":1947,"children":1948},{},[1949],{"type":34,"value":1950},"Helps manage transitions between UI states.",{"type":28,"tag":154,"props":1952,"children":1955},{"className":1953,"code":1954,"language":1813,"meta":8},[1811],"    const [ isPending, startTransition ] = useTransition();\n",[1956],{"type":28,"tag":159,"props":1957,"children":1958},{"__ignoreMap":8},[1959],{"type":34,"value":1954},{"type":28,"tag":37,"props":1961,"children":1962},{},[1963],{"type":34,"value":1964},"Example",{"type":28,"tag":154,"props":1966,"children":1969},{"className":1967,"code":1968,"language":1813,"meta":8},[1811],"\nconst TransitionExample = () => {\n\n    const initalItems = [...Array(1000000).keys()];\n\n    const [ isPending, startTransition ] = useTransition();\n    \n    const [ items, setItems ] = useState(initialItems)\n\n    const handleSearchKeyWord = (event) => {\n        let value = event?.target?.value || 2;\n        startTransition(() => {\n            setItem((prevItems) => {\n                return initalItems.filter((_, index) => {\n                    return _%2value;\n                })\n            \n            })\n        })\n        \n    }\n\n    return (\n        \u003Cdiv className='transition-element'>\n            \u003Cdiv className=''>\n                \u003Cinput type='text' onChange={ handleSearchKeyWord }/>\n            \u003C/div>\n            { isPending && \u003Cdiv>Loading...\u003C/div>}\n            { !isPending && \u003Cdiv>\n                {\n                    items.map((item, index) => {\n                        \u003Cdiv key={`${item}-${index}}>\u003C/div>\n                    })                                        \n                }\n            \u003C/div>}\n        \u003C/div>\n    )\n}\n\n",[1970],{"type":28,"tag":159,"props":1971,"children":1972},{"__ignoreMap":8},[1973],{"type":34,"value":1968},{"type":28,"tag":792,"props":1975,"children":1977},{"id":1976},"usedeferredvalue",[1978],{"type":28,"tag":159,"props":1979,"children":1981},{"className":1980},[],[1982],{"type":34,"value":1983},"useDeferredValue",{"type":28,"tag":399,"props":1985,"children":1986},{},[1987],{"type":28,"tag":403,"props":1988,"children":1989},{},[1990],{"type":34,"value":1991},"Defers updates for better responsiveness in UI-heavy apps.",{"type":28,"tag":154,"props":1993,"children":1996},{"className":1994,"code":1995,"language":1813,"meta":8},[1811],"const ImageGallery = () => {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const deferredSelectedImage = useDeferredValue(selectedImage, { timeoutMs: 500 }); \n\n  const handleImageClick = (image) => {\n    setSelectedImage(image);\n  };\n\n  return (\n    \u003Cdiv>\n      {/* Image Thumbnails */}\n      \u003Cdiv>\n        {images.map((image) => (\n          \u003Cimg \n            key={image.id} \n            src={image.thumbnail} \n            alt={image.title} \n            onClick={() => handleImageClick(image)} \n          />\n        ))}\n      \u003C/div>\n\n      {/* Large Image Viewer */}\n      {deferredSelectedImage && (\n        \u003Cdiv>\n          \u003Cimg \n            src={deferredSelectedImage.url} \n            alt={deferredSelectedImage.title} \n          />\n        \u003C/div>\n      )}\n    \u003C/div>\n  );\n}\n\n",[1997],{"type":28,"tag":159,"props":1998,"children":1999},{"__ignoreMap":8},[2000],{"type":34,"value":1995},{"title":8,"searchDepth":13,"depth":13,"links":2002},[2003,2004],{"id":1786,"depth":730,"text":1789},{"id":1875,"depth":730,"text":1878},"content:interviews:react:doc:hooks.md","interviews/react/doc/hooks.md","interviews/react/doc/hooks",{"_path":2009,"_dir":1813,"_draft":7,"_partial":7,"_locale":8,"title":8,"description":8,"body":2010,"_type":15,"_id":2014,"_source":17,"_file":2015,"_stem":2016,"_extension":20},"/interviews/react/doc",{"type":10,"children":2011,"toc":2012},[],{"title":8,"searchDepth":13,"depth":13,"links":2013},[],"content:interviews:react:doc:index.md","interviews/react/doc/index.md","interviews/react/doc/index",{"_path":2018,"_dir":23,"_draft":7,"_partial":7,"_locale":8,"title":2019,"description":8,"body":2020,"_type":15,"_id":2211,"_source":17,"_file":2212,"_stem":2213,"_extension":20},"/interviews/react/doc/optimization","React Optimization",{"type":10,"children":2021,"toc":2206},[2022,2029,2032,2038,2041,2047,2052,2061,2065,2070,2079,2083,2088,2097,2103,2108,2134,2143,2149,2172,2178],{"type":28,"tag":2023,"props":2024,"children":2026},"h2",{"id":2025},"react-performance-improvements",[2027],{"type":34,"value":2028},"React Performance Improvements",{"type":28,"tag":384,"props":2030,"children":2031},{},[],{"type":28,"tag":29,"props":2033,"children":2035},{"id":2034},"reactmemo-usememo-usecallback",[2036],{"type":34,"value":2037},"React.memo, useMemo, useCallback",{"type":28,"tag":384,"props":2039,"children":2040},{},[],{"type":28,"tag":792,"props":2042,"children":2044},{"id":2043},"reactmemo",[2045],{"type":34,"value":2046},"React.memo",{"type":28,"tag":37,"props":2048,"children":2049},{},[2050],{"type":34,"value":2051},"Optimizes functional components by memoizing their output to prevent unnecessary re-renders. If the props of the components don't change, React skips re-rendering it.\nFunctional components that rely only on props and avoid re-rendering if props remain the same",{"type":28,"tag":37,"props":2053,"children":2054},{},[2055],{"type":28,"tag":159,"props":2056,"children":2058},{"className":2057},[],[2059],{"type":34,"value":2060},"Prevents re-renders of functional components",{"type":28,"tag":792,"props":2062,"children":2063},{"id":1881},[2064],{"type":34,"value":1888},{"type":28,"tag":37,"props":2066,"children":2067},{},[2068],{"type":34,"value":2069},"Memoizes a computed value to avoid recalculating it on every renders unless dependencies changes. Caches the result of an expensive calculation",{"type":28,"tag":37,"props":2071,"children":2072},{},[2073],{"type":28,"tag":159,"props":2074,"children":2076},{"className":2075},[],[2077],{"type":34,"value":2078},"Prevents expensive calculations from being re-executed",{"type":28,"tag":792,"props":2080,"children":2081},{"id":1908},[2082],{"type":34,"value":1915},{"type":28,"tag":37,"props":2084,"children":2085},{},[2086],{"type":34,"value":2087},"Memoizes a function so that it retains the same references between renderts unless its dependencies changes. Prevent unnecessary recreation of functions, often useful when passing callbacks to child components",{"type":28,"tag":37,"props":2089,"children":2090},{},[2091],{"type":28,"tag":159,"props":2092,"children":2094},{"className":2093},[],[2095],{"type":34,"value":2096},"Prevent functions from being recreated unnessarily",{"type":28,"tag":792,"props":2098,"children":2100},{"id":2099},"react-lazy",[2101],{"type":34,"value":2102},"React Lazy",{"type":28,"tag":37,"props":2104,"children":2105},{},[2106],{"type":34,"value":2107},"Enable code splitting in react applications by dynamically importing components. This helps in optimizing app performance by loading components only when they are needed.",{"type":28,"tag":399,"props":2109,"children":2110},{},[2111,2116,2121],{"type":28,"tag":403,"props":2112,"children":2113},{},[2114],{"type":34,"value":2115},"Code Splitting: Divides the application into smaller bundles to improve initial load time",{"type":28,"tag":403,"props":2117,"children":2118},{},[2119],{"type":34,"value":2120},"Dynamic Imports: The compoinent is not loaded until it is rendered",{"type":28,"tag":403,"props":2122,"children":2123},{},[2124,2126,2132],{"type":34,"value":2125},"Suspense Integration: Work with the ",{"type":28,"tag":159,"props":2127,"children":2129},{"className":2128},[],[2130],{"type":34,"value":2131},"React.Suspense",{"type":34,"value":2133}," components to show a falback UI while the lazy loaded components is being fetched.",{"type":28,"tag":154,"props":2135,"children":2138},{"className":2136,"code":2137,"language":1813,"meta":8},[1811],"\nimport React, { Suspense } from 'react';\n\nconst LazyComponent = React.lazy(() => import('./MyComponent'));\n\nconst App = () => {\n    return (\n        \u003Cdiv className='app'>\n            \u003CSuspense fallback={\u003Cdiv>Loading\u003C/div>}>\n                \u003CLazyComponent/>\n            \u003C/Suspense>\n        \u003C/div>\n    )\n}\n\n",[2139],{"type":28,"tag":159,"props":2140,"children":2141},{"__ignoreMap":8},[2142],{"type":34,"value":2137},{"type":28,"tag":792,"props":2144,"children":2146},{"id":2145},"react-performance-packages",[2147],{"type":34,"value":2148},"React performance packages",{"type":28,"tag":399,"props":2150,"children":2151},{},[2152,2157,2162,2167],{"type":28,"tag":403,"props":2153,"children":2154},{},[2155],{"type":34,"value":2156},"react-intersection-observer",{"type":28,"tag":403,"props":2158,"children":2159},{},[2160],{"type":34,"value":2161},"react-lazyload",{"type":28,"tag":403,"props":2163,"children":2164},{},[2165],{"type":34,"value":2166},"react-virtualized",{"type":28,"tag":403,"props":2168,"children":2169},{},[2170],{"type":34,"value":2171},"react-window",{"type":28,"tag":792,"props":2173,"children":2175},{"id":2174},"performce-improvements",[2176],{"type":34,"value":2177},"Performce Improvements",{"type":28,"tag":399,"props":2179,"children":2180},{},[2181,2186,2191,2196,2201],{"type":28,"tag":403,"props":2182,"children":2183},{},[2184],{"type":34,"value":2185},"Avoid inline function definition",{"type":28,"tag":403,"props":2187,"children":2188},{},[2189],{"type":34,"value":2190},"Throttling and debouncing events",{"type":28,"tag":403,"props":2192,"children":2193},{},[2194],{"type":34,"value":2195},"Add key to list rendering",{"type":28,"tag":403,"props":2197,"children":2198},{},[2199],{"type":34,"value":2200},"React SSR",{"type":28,"tag":403,"props":2202,"children":2203},{},[2204],{"type":34,"value":2205},"Use Web workers",{"title":8,"searchDepth":13,"depth":13,"links":2207},[2208],{"id":2025,"depth":13,"text":2028,"children":2209},[2210],{"id":2034,"depth":730,"text":2037},"content:interviews:react:doc:optimization.md","interviews/react/doc/optimization.md","interviews/react/doc/optimization",1736354824658]